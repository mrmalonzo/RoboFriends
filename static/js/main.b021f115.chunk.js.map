{"version":3,"sources":["reportWebVitals.js","Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Components/ErrorBoundary.js","Containers/App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Card","props","name","email","id","className","alt","src","CardList","robots","cardComponent","map","user","i","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchField","target","value","fetch","response","json","users","filteredRobots","filter","toLowerCase","includes","length","console","log","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sMAYeA,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,2CCQCQ,EAbF,SAACC,GACb,IAAOC,EAAmBD,EAAnBC,KAAMC,EAAaF,EAAbE,MAAOC,EAAMH,EAANG,GACpB,OACC,sBAAKC,UAAU,sDAAf,cACC,qBAAKC,IAAM,aAAaC,IAAK,wBAAwBH,EAAG,aACxD,yCACC,6BAAKF,IADN,IAEC,4BAAIC,WCcOK,EApBE,SAAC,GAAa,IAAZC,EAAW,EAAXA,OAIZC,EAAgBD,EAAOE,KAAI,SAACC,EAAKC,GACtC,OAAO,cAAC,EAAD,CAENT,GAAIK,EAAOI,GAAGT,GACdF,KAAMO,EAAOI,GAAGX,KAChBC,MAAOM,EAAOI,GAAGV,OAHZS,EAAKR,OAOZ,OACC,8BACEM,KCLWI,EAVG,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,aAEnB,OACC,qBAAKV,UAAU,MAAf,SACC,uBAAOA,UAAU,mCAAmCW,KAAK,SAASC,YAAY,gBAAgBC,SAAUH,OCI5FI,G,MARA,SAAClB,GACf,OACC,sBAAKmB,MAAO,CAACC,UAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,SAApE,cACEtB,EAAMuB,cCmBKC,E,kDApBd,WAAYxB,GAAO,IAAD,8BACjB,cAAMA,IACDyB,MAAO,CACXC,UAAU,GAHM,E,qDAOlB,SAAkBC,EAAOC,GACxBC,KAAKC,SAAS,CAACJ,UAAS,M,oBAGzB,WACE,OAAGG,KAAKJ,MAAMC,SACN,0DAEDG,KAAK7B,MAAMuB,a,GAjBOQ,aCgEbC,E,kDAxDd,aAAc,IAAD,8BACZ,gBAsBDC,eAAiB,SAACC,GACjB,EAAKJ,SAAS,CAACK,YAAaD,EAAME,OAAOC,SAtBzC,EAAKZ,MAAQ,CACVjB,OAAQ,GACR2B,YAAa,IAJJ,E,qDAQb,WAAoB,IAAD,OASlBG,MAAM,8CACJ7C,MAAK,SAAA8C,GAAQ,OAAIA,EAASC,UAC1B/C,MAAK,SAAAgD,GAAK,OAAG,EAAKX,SAAS,CAACtB,OAAOiC,S,oBAUtC,WAAS,IAAD,OACDC,EAAiBb,KAAKJ,MAAMjB,OAAOmC,QAAO,SAAAnC,GAC/C,OAAOA,EAAOP,KAAK2C,cAAcC,SAAS,EAAKpB,MAAMU,YAAYS,kBAElE,OAAiC,IAA7Bf,KAAKJ,MAAMjB,OAAOsC,OACd,oBAAI1C,UAAU,KAAd,sBAEP2C,QAAQC,IAAIN,GAEX,sBAAKtC,UAAU,KAAf,UACC,oBAAIA,UAAU,KAAd,yBACA,cAAC,EAAD,CAAWU,aAAce,KAAKI,iBAE9B,eAAC,EAAD,eACC,eAAC,EAAD,eACC,cAAC,EAAD,CAAUzB,OAAQkC,IADnB,UALF,Y,GAxCcX,aCAlBkB,IAASC,OACP,cAAC,IAAMC,WAAP,UAGA,cAAC,EAAD,MAEAC,SAASC,eAAe,SAM1B/D,M","file":"static/js/main.b021f115.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\n\nconst Card = (props) => { //props in an object property passed from index.js\n\tconst {name, email, id} = props; //destructuring so you wont need props.name but only name or you can straight up replace props in parameter with {name, email id}\n\treturn (\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'> {/*inline border, border 3, padding 3, margin 2, grow animation, border width 2, border shadow 5*/}\t\t\t\t\t\t\n\t\t\t<img alt = \"Robot Card\" src={'https://robohash.org/'+id+'?200x200'} />\n\t\t\t<div>\t\t\t\t\t\t{/* or {$props.id} to get picture from id number of robot*/}\n\t\t\t\t<h2>{name}</h2> {/*curly brackets to tell JSX that it is a js expression*/}\n\t\t\t\t<p>{email}</p>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default Card;","import React from \"react\";\nimport Card from './Card';\n\nconst CardList = ({robots}) =>{ //returns the multiple card children object. This is the parent\n\t// if(true){\n\t// \tthrow new Error(\"NOOO!\"); //throw an error\n\t// }\n\tconst cardComponent = robots.map((user,i) =>{ //loop na parang for each, user gets per object and 2nd parameter is index \n\t\treturn <Card \n\t\t\tkey={user.id} \n\t\t\tid={robots[i].id} \n\t\t\tname={robots[i].name} \n\t\t\temail={robots[i].email}\n\t\t/> //rereturn mo bale yung object na card na nagawa mo sa loop sa cardComponent\n\t\t\t// we have to add a key so react will know if ever this card is removed and they wont need to change the whole DOM, better na unique ang key so id\n\t}) //parang for each ang map, always returns something\n\treturn(\n\t\t<div>\n\t\t\t{cardComponent} \n  \t\t</div>\n  \t);\n} //can be cleaner if we remove card component and instead diretso ng ilagay ang map don\n\nexport default CardList;\n\n// foundation of map is: const Sample = array.map(x => x*2)\n// \tsample will multiply all the array numbers by 2\t\t","import React from \"react\";\n\n\nconst SearchBox = ({searchChange}) =>{\n\n\treturn(\n\t\t<div className=\"pa2\">\n\t\t\t<input className=\"pa3 ba b--green bg-lightest-blue\" type=\"search\" placeholder=\"Search Robots\" onChange={searchChange}/>{/* onChange is an html attribute*/}\n\t\t</div> //everytime the onchange event occurs, call the searchchange method\n\t);\n\n}\n \nexport default SearchBox;","import React from \"react\";\n\n\nconst Scroll = (props) =>{ //we just need this scroll to render whatever it wraps around\n\treturn (\n\t\t<div style={{overflowY:\"scroll\", border: '5px solid black', height: \"700px\"}}> {/*we can create a seperate css that is scrollable or we can use jsx styling that returns an object*/}\n\t\t\t{props.children}\n\t\t</div>\n\t);\n} \n\nexport default Scroll;\n\n","import React, {Component} from \"react\";\n\n\nclass ErrorBoundary extends Component{ //userful when app is in production\n\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state ={\n\t\t\thasError: false\n\t\t}\n\t}\n\n\tcomponentDidCatch(error, info){ //new react method that is like try catch, when any error comes, this is run. Has error and info for parameters automatically\n\t\tthis.setState({hasError:true});\n\t} //if there is an error, make it true\n\n\trender(){\n\t\t if(this.state.hasError){ //render h1 if there is an error\n\t\t \treturn <h1>Oooops. That is not good</h1>\n\t\t }\n\t\t return this.props.children //if there is no error, render the children which is the object that it wraps over\n\t}\n\n}\n\nexport default ErrorBoundary;","import React, { Component } from \"react\";\nimport CardList from \"../Components/CardList\";\n// import {robots} from \"./robots\";\nimport SearchBox from \"../Components/SearchBox\";\nimport './App.css';\nimport Scroll from \"../Components/Scroll\";\nimport ErrorBoundary from \"../Components/ErrorBoundary\";\n\n\t\t//smart component if it typically has class syntax\nclass App extends Component{ //dapat class na pag may state\n\t\n\tconstructor(){ //para sa paggawa ng states\n\t\tsuper(); //this is required to call the constructor of component just like in java\n\t\tthis.state = { //this will be your state to make the app interactive\n\t\t\t\t\trobots: [],//dati robots lang, //since attribute na ng state yung robot, maalter mo na siya\n\t\t\t\t\tsearchField: '' //empty array of robots to make it more realistic\n\t\t\t} //state is something that can chaneg and affect our app, usually in the parent component\n\t}\n\n\tcomponentDidMount(){ //a method of react that is read as the last part at mounting \n\t\t// this.setState({robots: robots});\n\t\t// fetch(\"https://jsonplaceholder.typicode.com/users\").then(response => { //fetch it in the website \n\t\t// \treturn response.json(); //convert response into a json file\n\t\t// }).then(users =>{ //then get the user in the json\n\t\t// \tthis.setState({robots:users}) //set the robots state into the user\n\t\t// })\n\n\t\t //shorter version //fetch is a tool used to request something on a server\n\t\tfetch(\"https://jsonplaceholder.typicode.com/users\")\n\t\t\t.then(response => response.json())\n\t\t\t.then(users =>this.setState({robots:users}));\n\t} //will be called automatically by react in mounting part\n\n\t//use this syntax whenever you create your own method to make sure that the \"this\" refers to this object by this class\n\tonSearchChange = (event) =>{ //function that makes an event whenever the search changes\n\t\tthis.setState({searchField: event.target.value}) //a built in method when you want to change state, and not this.state =. You will change the value of the searchField depending on the event value of the keyboard typed in the searchbox\n\t\t\n\t\t// console.log(event.target.value); //to console.log the value of the search bar\n\t}\n\n\trender(){ //laging may render ang class\n\t\tconst filteredRobots = this.state.robots.filter(robots =>{\n\t\t\treturn robots.name.toLowerCase().includes(this.state.searchField.toLowerCase()) //this basically compares all the name of the robots on the array to the searchField attribute of the state, toLower to remove capitalization. includes is a method of a string\n\t\t}); //alter mo yung state ng robot attribute depending on the kayword in the searchbar\n\t\tif (this.state.robots.length === 0){ //if its taking long to load the robot\n\t\t\treturn <h1 className=\"tc\">Loading</h1> //put here a loading bar while you get data in server\n\t\t}else{ //if it is loaded\n\t\t\tconsole.log(filteredRobots); //filtered robots is the array of objects of array that is being filtered according to the searchbar\n\t\t\treturn(\n\t\t\t\t<div className=\"tc\">\n\t\t\t\t\t<h1 className=\"f1\">RoboFriends</h1>\n\t\t\t\t\t<SearchBox searchChange={this.onSearchChange}/>{/* this because class na, basically passing the method on search chaneg*/}\n\t\t\t\t\t{/*<CardList robots={this.state.robots}/>{ access robots from the state and it becomes a prop}*/}\n\t\t\t\t\t<Scroll> {/*wrap my carlist in scroll so it can be scrollable*/}\n\t\t\t\t\t\t<ErrorBoundary> {/*wrap this with error boundary so there is something that will show when an error occurs on cardlist*/}\n\t\t\t\t\t\t\t<CardList robots={filteredRobots}/> {/*now pass the updated filtered robots here instead of this.state.robots*/}\n\t\t\t\t\t\t</ErrorBoundary>\n\t\t\t\t\t</Scroll> {/*carlist will be the child of scroll that can be accessed in the props*/}\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\t\t\n\n\t}\n\t\n}\n\nexport default App;\n\n//lifecycle are built in methods react that can be used \n\n//constructor -> render -> component did mount -> render (whenever something is updating, render is rerun)","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n// import {robots} from \"./robots\"; //destructuring because only export was used, so if there are 2 or more, {robots, cats}\n// import CardList from \"./CardList\"; //will be the parent object of the card to prevent using too many card functions.\nimport App from \"./Containers/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n\t{/*<Card id={robots[0].id} name={robots[0].name} email={robots[0].email}/> {/*brackets to let them say that it is a js expression*/}\n\t{/*<CardList robots={robots}/>*/ /*import parent cardlist that has children of cards*/}\n  <App />\n  </React.StrictMode>, //pass the robots array as a robots parameter in cardslist\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}